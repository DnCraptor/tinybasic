
Testing VAL and STR on this kernel...
and of @V

Decimal test of VAL and @V
'10' -> 10 (@V=2)
' 10' -> 10 (@V=3)
'010' -> 10 (@V=3)
'-15' -> -15 (@V=3)
'd18' -> 0 (@V=0)
'd 18' -> 0 (@V=0)
'd61' -> 0 (@V=0)
'45t' -> 45 (@V=2)
'45 46' -> 45 (@V=2)
'- 12' -> 0 (@V=0)
'65535' -> 65535 (@V=5)
'65536' -> 65536 (@V=5)
'2147483647' -> 2.14748E9 (@V=10)
'2147483648' -> 2.14748E9 (@V=10)
'4294967295' -> 4.29496E9 (@V=10)
'4294967296' -> 4.29496E9 (@V=10)
'4294967297' -> 4.29496E9 (@V=10)


Hexadecimal test of VAL and @V
'0x10' -> 16 (@V=4)
'0X10' -> 16 (@V=4)
'0x010' -> 16 (@V=5)
'0x 25' -> 0 (@V=2)
' 0x25' -> 37 (@V=5)
'0x44 0x2' -> 68 (@V=4)
'35 0x40' -> 35 (@V=2)
'0xZ40' -> 0 (@V=2)
'Z0x40' -> 0 (@V=0)
'x10' -> 0 (@V=0)
'0xfe' -> 254 (@V=4)
'0XFE' -> 254 (@V=4)
'-0XFe' -> -254 (@V=5)
'0x-10' -> 0 (@V=2)
'0xFFFF' -> 65535 (@V=6)
'0x10000' -> 65536 (@V=7)
'0xffffFFFF' -> 4.29496E9 (@V=10)
'0x7fffffff' -> 2.14748E9 (@V=10)
'0x80000000' -> 2.14748E9 (@V=10)
'0x1ffffFFFF' -> 8.58993E9 (@V=11)
'0x100000000' -> 4.29496E9 (@V=11)
'0x100000001' -> 4.29496E9 (@V=11)
'-0x100000000' -> -4.29496E9 (@V=12)


Octal test of VAL and @V
'0o10' -> 8 (@V=4)
'0O10' -> 8 (@V=4)
'0o010' -> 8 (@V=5)
'0o 25' -> 0 (@V=2)
' 0o25' -> 21 (@V=5)
'0o44 0o2' -> 36 (@V=4)
'35 0o40' -> 35 (@V=2)
'0oZ40' -> 0 (@V=2)
'Z0o40' -> 0 (@V=0)
'0o40Z' -> 32 (@V=4)
'o10' -> 0 (@V=0)
'0o377' -> 255 (@V=5)
'0o400' -> 256 (@V=5)
'-0o377' -> -255 (@V=6)
'0o-10' -> 0 (@V=2)
'0o177777' -> 65535 (@V=8)
'0o200000' -> 65536 (@V=8)
'0o37777777777' -> 4.29496E9 (@V=13)
'0o17777777777' -> 2.14748E9 (@V=13)
'0o20000000000' -> 2.14748E9 (@V=13)
'0o77777777777' -> 8.58993E9 (@V=13)
'0o40000000000' -> 4.29496E9 (@V=13)
'0o40000000001' -> 4.29496E9 (@V=13)
'-0o40000000000' -> -4.29496E9 (@V=14)


Binary test of VAL
Bit Walking...
1 = '0b1' -> 1
2 = '0b10' -> 2
3 = '0b100' -> 4
4 = '0b1000' -> 8
5 = '0b10000' -> 16
6 = '0b100000' -> 32
7 = '0b1000000' -> 64
8 = '0b10000000' -> 128
9 = '0b100000000' -> 256
10 = '0b1000000000' -> 512
11 = '0b10000000000' -> 1024
12 = '0b100000000000' -> 2048
13 = '0b1000000000000' -> 4096
14 = '0b10000000000000' -> 8192
15 = '0b100000000000000' -> 16384
16 = '0b1000000000000000' -> 32768
17 = '0b10000000000000000' -> 65536
18 = '0b100000000000000000' -> 131072
19 = '0b1000000000000000000' -> 262144
20 = '0b10000000000000000000' -> 524288
21 = '0b100000000000000000000' -> 1048576
22 = '0b1000000000000000000000' -> 2097152
23 = '0b10000000000000000000000' -> 4194304
24 = '0b100000000000000000000000' -> 8388608
25 = '0b1000000000000000000000000' -> 1.67772E7
26 = '0b10000000000000000000000000' -> 3.35544E7
27 = '0b100000000000000000000000000' -> 6.71088E7
28 = '0b1000000000000000000000000000' -> 1.34217E8
29 = '0b10000000000000000000000000000' -> 2.68435E8
30 = '0b100000000000000000000000000000' -> 5.3687E8
31 = '0b1000000000000000000000000000000' -> 1.07374E9
32 = '0b10000000000000000000000000000000' -> 2.14748E9
'0b10' -> 2 (@V=4)
'0B10' -> 2 (@V=4)
'0b010' -> 2 (@V=5)
'0b 10' -> 0 (@V=2)
' 0b10' -> 2 (@V=5)
'0b11 0b1' -> 3 (@V=4)
'11 0b10' -> 11 (@V=2)
'0oZ10' -> 0 (@V=2)
'Z0b10' -> 0 (@V=0)
'b10' -> 0 (@V=0)
'0b11111111' -> 255 (@V=10)
'0b100000000' -> 256 (@V=11)
'-0b11111111' -> -255 (@V=11)
'0b-10' -> 0 (@V=2)
'0b1111111111111111' -> 65535 (@V=18)
'0b10000000000000000' -> 65536 (@V=19)
Largest binary number in string form (29 bits) for an unmodified string length:
0b11111111111111111111111111111 -> 5.3687E8 (@V=31)


Testing STR(number, base)
65535 Base 2 -> 1111111111111111
65535 Base 3 -> 10022220020
65535 Base 4 -> 33333333
65535 Base 5 -> 4044120
65535 Base 6 -> 1223223
65535 Base 7 -> 362031
65535 Base 8 -> 177777
65535 Base 9 -> 108806
65535 Base 10 -> 65535
65535 Base 11 -> 45268
65535 Base 12 -> 31B13
65535 Base 13 -> 23AA2
65535 Base 14 -> 19C51
65535 Base 15 -> 14640
65535 Base 16 -> FFFF
65535 Base 17 -> D5D0
65535 Base 18 -> B44F
65535 Base 19 -> 9AA4
65535 Base 20 -> 83GF
65535 Base 21 -> 71CF
65535 Base 22 -> 638J
65535 Base 23 -> 58K8
65535 Base 24 -> 4HIF
65535 Base 25 -> 44LA
65535 Base 26 -> 3IOF
65535 Base 27 -> 38O6
65535 Base 28 -> 2RGF
65535 Base 29 -> 2JQO
65535 Base 30 -> 2COF
65535 Base 31 -> 2661
65535 Base 32 -> 1VVV

0 Base 2 -> 0
0 Base 3 -> 0
0 Base 4 -> 0
0 Base 5 -> 0
0 Base 6 -> 0
0 Base 7 -> 0
0 Base 8 -> 0
0 Base 9 -> 0
0 Base 10 -> 0
0 Base 11 -> 0
0 Base 12 -> 0
0 Base 13 -> 0
0 Base 14 -> 0
0 Base 15 -> 0
0 Base 16 -> 0
0 Base 17 -> 0
0 Base 18 -> 0
0 Base 19 -> 0
0 Base 20 -> 0
0 Base 21 -> 0
0 Base 22 -> 0
0 Base 23 -> 0
0 Base 24 -> 0
0 Base 25 -> 0
0 Base 26 -> 0
0 Base 27 -> 0
0 Base 28 -> 0
0 Base 29 -> 0
0 Base 30 -> 0
0 Base 31 -> 0
0 Base 32 -> 0

-2.14748E9 Base 2 -> -1111111111111111111111110000000
-2.14748E9 Base 3 -> -12112122212110120200
-2.14748E9 Base 4 -> -1333333333332000
-2.14748E9 Base 5 -> -13344223433040
-2.14748E9 Base 6 -> -553032005200
-2.14748E9 Base 7 -> -104134210620
-2.14748E9 Base 8 -> -17777777600
-2.14748E9 Base 9 -> -5478773520
-2.14748E9 Base 10 -> -2.14748E9
-2.14748E9 Base 11 -> -A02220176
-2.14748E9 Base 12 -> -4BB230800
-2.14748E9 Base 13 -> -282BA4A10
-2.14748E9 Base 14 -> -1652CA880
-2.14748E9 Base 15 -> -C87E6630
-2.14748E9 Base 16 -> -7FFFFF80
-2.14748E9 Base 17 -> -53G7F4E0
-2.14748E9 Base 18 -> -3928G3A0
-2.14748E9 Base 19 -> -27C57GF8
-2.14748E9 Base 20 -> -1DB1F8G0
-2.14748E9 Base 21 -> -140H2D30
-2.14748E9 Base 22 -> -IKF5B96
-2.14748E9 Base 23 -> -EBELF3G
-2.14748E9 Base 24 -> -B5GGE00
-2.14748E9 Base 25 -> -8JMDNFK
-2.14748E9 Base 26 -> -6OJ8IK0
-2.14748E9 Base 27 -> -5EHNCFI
-2.14748E9 Base 28 -> -4CLM940
-2.14748E9 Base 29 -> -3HK793P
-2.14748E9 Base 30 -> -2SB6CO0
-2.14748E9 Base 31 -> -2D09U7T
-2.14748E9 Base 32 -> -1VVVVS0
Done
