10 REM "Test VAL and STR in as many cases as possible"
20 REM "Serge Caron, 2025"
30 PRINT ""
40 PRINT "Testing VAL and STR on this kernel..."
50 PRINT "and of @V"
60 REM "Longer strings to avoid 29 length restriction"
70 DIM A$(80), B$(80), C$(80)

100 PRINT ""
110 PRINT "Decimal test of VAL and @V"
120 A$ = "10": GOSUB 9000
130 A$ = " 10": GOSUB 9000
140 A$ = "010": GOSUB 9000
150 A$ = "-15": GOSUB 9000
160 A$ = "d18": GOSUB 9000
170 A$ = "d 18": GOSUB 9000
180 A$ = "d61": GOSUB 9000
190 A$ = "45t": GOSUB 9000
200 A$ = "45 46": GOSUB 9000
210 A$ = "- 12": GOSUB 9000
220 A$ = "65535": GOSUB 9000
230 A$ = "65536": GOSUB 9000
240 A$ = "2147483647": GOSUB 9000
250 A$ = "2147483648": GOSUB 9000
260 A$ = "4294967295": GOSUB 9000
270 A$ = "4294967296": GOSUB 9000
280 A$ = "4294967297": GOSUB 9000
290 GOSUB 8000

500 PRINT ""
510 PRINT "Hexadecimal test of VAL and @V"
520 A$ = "0x10": GOSUB 9000
530 A$ = "0X10": GOSUB 9000
540 A$ = "0x010": GOSUB 9000
550 A$ = "0x 25": GOSUB 9000
560 A$ = " 0x25": GOSUB 9000
570 A$ = "0x44 0x2": GOSUB 9000
580 A$ = "35 0x40": GOSUB 9000
590 A$ = "0xZ40": GOSUB 9000
600 A$ = "Z0x40": GOSUB 9000
610 A$ = "x10": GOSUB 9000
620 A$ = "0xfe": GOSUB 9000
630 A$ = "0XFE": GOSUB 9000
640 A$ = "-0XFe": GOSUB 9000
650 A$ = "0x-10": GOSUB 9000
660 A$ = "0xFFFF": GOSUB 9000
670 A$ = "0x10000": GOSUB 9000
680 A$ = "0xffffFFFF": GOSUB 9000
690 A$ = "0x7fffffff": GOSUB 9000
700 A$ = "0x80000000": GOSUB 9000
710 A$ = "0x1ffffFFFF": GOSUB 9000
720 A$ = "0x100000000": GOSUB 9000
730 A$ = "0x100000001": GOSUB 9000
740 A$ = "-0x100000000": GOSUB 9000
750 GOSUB 8000

1000 PRINT ""
1010 PRINT "Octal test of VAL and @V"
1020 A$ = "0o10": GOSUB 9000
1030 A$ = "0O10": GOSUB 9000
1040 A$ = "0o010": GOSUB 9000
1050 A$ = "0o 25": GOSUB 9000
1060 A$ = " 0o25": GOSUB 9000
1070 A$ = "0o44 0o2": GOSUB 9000
1080 A$ = "35 0o40": GOSUB 9000
1090 A$ = "0oZ40": GOSUB 9000
1100 A$ = "Z0o40": GOSUB 9000
1110 A$ = "0o40Z": GOSUB 9000
1120 A$ = "o10": GOSUB 9000
1130 A$ = "0o377": GOSUB 9000
1140 A$ = "0o400": GOSUB 9000
1150 A$ = "-0o377": GOSUB 9000
1160 A$ = "0o-10": GOSUB 9000
1170 A$ = "0o177777": GOSUB 9000
1180 A$ = "0o200000": GOSUB 9000
1190 A$ = "0o37777777777": GOSUB 9000
1200 A$ = "0o17777777777": GOSUB 9000
1210 A$ = "0o20000000000": GOSUB 9000
1220 A$ = "0o77777777777": GOSUB 9000
1230 A$ = "0o40000000000": GOSUB 9000
1240 A$ = "0o40000000001": GOSUB 9000
1250 A$ = "-0o40000000000": GOSUB 9000
1260 GOSUB 8000

1500 PRINT ""
1510 PRINT "Binary test of VAL"
1520 PRINT "Bit Walking..."
1530 Z$="0"
1540 A$="0b1"
1550 B$ = "'"
1560 FOR I=1 TO 32 
1570 C$ = B$ + A$ + B$
1580 PRINT I, "=", C$, "->", VAL(A$)
1590 A$ = A$ + Z$
1600 NEXT
1620 A$ = "0b10": GOSUB 9000
1630 A$ = "0B10": GOSUB 9000
1640 A$ = "0b010": GOSUB 9000
1650 A$ = "0b 10": GOSUB 9000
1660 A$ = " 0b10": GOSUB 9000
1670 A$ = "0b11 0b1": GOSUB 9000
1680 A$ = "11 0b10": GOSUB 9000
1690 A$ = "0oZ10": GOSUB 9000
1700 A$ = "Z0b10": GOSUB 9000
1710 A$ = "b10": GOSUB 9000
1720 A$ = "0b11111111": GOSUB 9000
1730 A$ = "0b100000000": GOSUB 9000
1740 A$ = "-0b11111111": GOSUB 9000
1750 A$ = "0b-10": GOSUB 9000
1760 A$ = "0b1111111111111111": GOSUB 9000
1770 A$ = "0b10000000000000000": GOSUB 9000
1780 PRINT "Largest binary number in string form (29 bits) for an unmodified string length:"
1790 A$ = "0b11111111111111111111111111111": PRINT A$, "->", VAL(A$), "(@V=";@V;")"
1800 GOSUB 8000

2000 PRINT ""
2010 PRINT "Testing STR(number, base)"
2020 A = 65535
2030 FOR B=2 TO 32
2040 GOSUB 7000
2050 NEXT
2060 GOSUB 8000
2070 A = 0
2080 FOR B=2 TO 32
2090 GOSUB 7000
2100 NEXT
2110 GOSUB 8000
2120 A = -2147483648
2130 FOR B=2 TO 32
2140 GOSUB 7000
2150 NEXT

3000 REM ""
3010 REM "Things that can go wrong"
3020 REM "To be done SL"

6000 PRINT "Done"
6010 END

6999 REM "Cute line formating for STR(). A contains the number, B is the base"
7000 PRINT A, "Base", B, "->" , STR(A, B)
7010 RETURN

7999 REM "Wait for a key"
8000 PRINT ""
8005 RETURN
8010 PRINT "Press a key to continue"
8020 WHILE AVAIL(1)=0
8030 WEND
8040 GET A
8050 RETURN

8999 REM "Cute line formating for VAL(). A$ contains the string to be converted"
9000 PRINT "'";A$;"'", "->", VAL(A$), "(@V=";@V;")"
9010 RETURN

